%YAML 1.2
---
name: CP2K Input
file_extensions: [inp, 1.restart]
scope: syntax.cp2k

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
  var:  '(\$\{{{ident}}\}|\${{ident}})'
  bool: '(?i:\s\.true\.\s|\s\.false\.\s|\s\.t\.\s|\s\.f\.\s|\btrue\b|\bfalse\b)'
  op: '(==|\/=)'

contexts:
  main:
    - match: (\#|\!)
      push: comment

    # keyword unit (KEYWORD [angstrom] VALUE)
    - match: (?xi:\[.+\])
      scope: variable

    # input section with optional modifier (&SECTION ON / &END SECTION)
    - match: (?xi:^\s*(\&{{ident}})\s({{ident}})? )
      captures:
        0: variable
        1: keyword.control.cp2k

    # variable
    - match: '{{var}}'
      scope: variable

    # floats and integers (without an exponent)
    - match: (?xi:(?<![a-z_]) [-+]? \d+(\.\d+)? \s)
      scope: constant.numeric.cp2k

    # integer list: 1..n
    - match: (?xi:(?<![a-z_])[-+]? \d+\.\.\d+ \s)
      scope: constant.numeric.cp2k
    
    # floats with an exponent (must come before -+ operators) and optional underscore kind
    - match: (?xi:(?<![a-z_\)]) [-+]? (\d+\.\d+ | \d+\. | \.\d+ | \d+) [ed] [-+]? \d+ (_\w+)? )
      scope: constant.numeric.floating-point.cp2k

    # set directive
    - match: (?xi:(^\s*\@SET) \s ( {{ident}} | \{ {{ident}} \}) )
      captures:
        0: string
        1: constant.numeric.cp2k

    # if/endif directive
    - match: (?xi:(^\s*\@IF \s \( | \)$ | \@ENDIF) )
      scope: string
    
    # include directive
    - match: (?xi:^\s*\@INCLUDE \b )
      scope: string

    # logical values
    - match: '{{bool}}'
      scope: constant.language.cp2k

    # logical operators
    - match: '{{op}}'
      scope: keyword.operator.cp2k

  comment:
    - meta_scope: comment.line.cp2k
    - match: $\n?
      pop: true